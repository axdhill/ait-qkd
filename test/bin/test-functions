#!/bin/bash

# ------------------------------------------------------------
# test-q3p-keystore-functions
# 
# This holds some functions for testing
#
# Author: Oliver Maurhart, <oliver.maurhart@ait.ac.at>
#
# Copyright (C) 2012-2016 AIT Austrian Institute of Technology
# AIT Austrian Institute of Technology GmbH
# Donau-City-Strasse 1 | 1220 Vienna | Austria
# http://www.ait.ac.at
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, 
# Boston, MA  02110-1301, USA.
# ------------------------------------------------------------

shopt -s expand_aliases

# --------------------------------------------------
# define the start of our tests
#

export TEST_BASE="@CMAKE_BINARY_DIR@"

# database: key-stores
export DB_ALICE_2_BOB="${TEST_BASE}/alice_to_bob.db"
export DB_BOB_2_ALICE="${TEST_BASE}/bob_to_alice.db"

# the shared secret
export SHARED_SECRET=$(cat ${TEST_BASE}/test/test-data/shared-secret)
export SHARED_SECRET_FILE="${TEST_BASE}/test/test-data/shared-secret-very-long"

export QKD_DBUS_SESSION_ADDRESS="unix:path=/tmp/qkd-test-dbus/qkd_dbus_socket"

# newer versions of qdbus use --bus instead of --address
qdbus --help | grep '\--bus' &> /dev/null
if [ "$?" = 0 ]; then
    alias qkd_qdbus='qdbus --bus ${QKD_DBUS_SESSION_ADDRESS}'
else
    alias qkd_qdbus='qdbus --address ${QKD_DBUS_SESSION_ADDRESS}'
fi


# --------------------------------------------------
# ensure there is a clean environment to test
# 
function test_cleanup() {

    # if we ain't got a local testing DBus: just kill all processes we find
    DBUS_PRESENT="FALSE"
    if [ -f /tmp/qkd-test-dbus/qkd-dbus.pid ]; then
        pgrep dbus-daemon | grep $(cat /tmp/qkd-test-dbus/qkd-dbus.pid) &> /dev/null    
        if [ "$?" = "0" ]; then
            echo "Local testing DBus present"
            DBUS_PRESENT="TRUE"
        fi
    fi

    if [ "${DBUS_PRESENT}" = "TRUE" ]; then

        # kick any running q3pd processes
        for p in $(qkd_qdbus | grep at.ac.ait.q3p.node); do
            PID=$(qkd_qdbus ${p} /Node process_id 2> /dev/null) && (
                echo "found q3pd running with pid ${PID} - killing ..."
                kill ${PID}
            )
        done
        
        # kick any running qkd modules processes
        for p in $(qkd_qdbus | grep at.ac.ait.qkd.module); do
            PID=$(qkd_qdbus ${p} /Module process_id 2> /dev/null) && (
                echo "found qkd module running with pid ${PID} - killing ..."
                kill ${PID}
            )
        done

    else
        pkill ^q3pd
        pkill ^qkd-
    fi

    # kick testing dbus
    test -f /tmp/qkd-test-dbus/qkd-dbus.pid && kill $(cat /tmp/qkd-test-dbus/qkd-dbus.pid)
}


# --------------------------------------------------
# init test environment
# 
# $1    name of test folder
function test_init() {

    if [ -z "${1}" ]; then
        echo 'No test folder given'
        exit 1
    fi

    ( 
        cd ${TEST_BASE}/bin;
    
        ln -f -s modules/qkd-auth/qkd-auth;
        ln -f -s modules/qkd-sifting-bb84/qkd-sifting-bb84;
        ln -f -s modules/qkd-resize/qkd-resize;
        ln -f -s modules/qkd-cascade/qkd-cascade;
        ln -f -s modules/qkd-cat/qkd-cat;
        ln -f -s modules/qkd-confirmation/qkd-confirmation;
        ln -f -s modules/qkd-dekey/qkd-dekey;
        ln -f -s modules/qkd-drop/qkd-drop;
        ln -f -s modules/qkd-enkey/qkd-enkey;
        ln -f -s modules/qkd-error-estimation/qkd-error-estimation;
        ln -f -s modules/qkd-ping/qkd-ping;
        ln -f -s modules/qkd-privacy-amplification/qkd-privacy-amplification;
        ln -f -s modules/qkd-reorder/qkd-reorder;
        ln -f -s modules/qkd-tee/qkd-tee;
        ln -f -s modules/qkd-statistics/qkd-statistics;
        ln -f -s modules/qkd-sync/qkd-sync;
        ln -f -s modules/qkd-throttle/qkd-throttle;
        
        ln -f -s qkd-gui/qkd-gui qg
        
        # shortcut for the "shared" folder -> emulate data path
        ln -f -s ../../share modules
        
        ln -f -s tools/q3p-keystore-dump/q3p-keystore-dump;
        ln -f -s tools/q3p-mq-reader/q3p-mq-reader;
        ln -f -s tools/qkd-key-compare/qkd-key-compare;
        ln -f -s tools/qkd-key-dump/qkd-key-dump;
        ln -f -s tools/qkd-key-gen/qkd-key-gen;
        ln -f -s tools/qkd-key-gen-dv/qkd-key-gen-dv;
        ln -f -s tools/qkd-pipeline/qkd-pipeline;
        ln -f -s tools/qkd-key-slice/qkd-key-slice;
        ln -f -s tools/qkd-view/qkd-view;
        
    )
    
    # clean up any remnants of previous tests
    test_cleanup
    
    # setup local DBUS for testing
    mkdir -p /tmp/qkd-test-dbus &> /dev/null
    rm -f /tmp/qkd-test-dbus/qkd-dbus.pid &> /dev/null
    dbus-daemon --config-file ${TEST_BASE}/test/test-data/qkd-test-dbus.conf
    DBUS_ID=$(qkd_qdbus org.freedesktop.DBus / GetId)
    if [ -z ${DBUS_ID} ]; then
        echo 'Failed to launch local DBus for testing.'
        exit 1
    fi
    
    mkdir -p ${1} 2> /dev/null
    TEST_DATA_FOLDER=$(readlink -f ${1})
    cd ${1}
    if [ "$?" != "0" ]; then
        echo 'Failed to create test folder "${1}"'
        exit 1
    fi
    rm * &> /dev/null
    
    # most pipeline configs use ipc://tmp/qkd
    mkdir -p /tmp/qkd &> /dev/null
    
    ulimit -c unlimited
    echo 
    echo "---- test hint ----"
    echo "test folder:"
    echo "      ${TEST_DATA_FOLDER}"
    echo "query local temporary DBus with: "
    echo "      $ qdbus --address unix:path=/tmp/qkd-test-dbus/qkd_dbus_socket"
    echo "or use: "
    echo "      $ export DBUS_SESSION_BUS_ADDRESS=\"unix:path=/tmp/qkd-test-dbus/qkd_dbus_socket\""
    echo "If you want to examine core dumps you might set:"
    echo "      # echo 1 > /proc/sys/kernel/core_uses_pid"
    echo "      # echo 'core_%e.%p' > /proc/sys/kernel/core_pattern"
    echo "If you want to see all test details in a file "
    echo "named 'test_details' invoke the test suite with this:"
    echo "      $ ctest -V 2>&1 | tee test_details"
    echo 
}


# --------------------------------------------------
# ensure q3pd is started
#
# ${1}      id of q3pd
# 
function q3pd_start() {

    # sanity check
    if [ "${1}" == "" ]; then
        echo "no ID given"
        exit 1
    fi

    # check if the q3pd is not running already
    qkd_qdbus | grep at.ac.ait.q3p.node-${1} &> /dev/null
    if [ "$?" == "0" ]; then
        echo "an instance of at.ac.ait.q3p.node-${1} is already running"
        echo "quit this instance first"
        exit 1
    fi
    
    # ensure we always start with an empty config
    rm -rf ${TEST_BASE}/q3pd_${1}.config &> /dev/null
    touch ${TEST_BASE}/q3pd_${1}.config 
    
    # launch a Q3P KeyStore
    ${TEST_BASE}/bin/q3pd/q3pd --config ${TEST_BASE}/q3pd_${1}.config ${*} 2>>q3pd_${1}_${RANDOM}.stderr &
    sleep 1
    qkd_qdbus | grep at.ac.ait.q3p.node-${1} &> /dev/null
    if [ "$?" != "0" ]; then
        echo "failed to start at.ac.ait.q3p.node-${1}" 
        exit 1
    fi
}


# --------------------------------------------------
# ensure q3pd is stopped
#
# ${1}      id of q3pd
# 
function q3pd_stop() {

    # sanity check
    if [ "${1}" == "" ]; then
        echo "no ID given"
        exit 1
    fi
    
    # remove any default config empty file
    rm -rf ${TEST_BASE}/q3pd_${1}.config &> /dev/null

    # check if the q3pd is running already
    qkd_qdbus | grep at.ac.ait.q3p.node-${1} &> /dev/null
    if [ "$?" != "0" ]; then
        echo "no at.ac.ait.q3p.node-${1} running"
        echo "start an instance first"
        exit 1
    fi

    # terminate the q3pd
    qkd_qdbus at.ac.ait.q3p.node-${1} /Node quit &> /dev/null
    sleep 1
    qkd_qdbus | grep at.ac.ait.q3p.node-${1} &> /dev/null
    if [ "$?" != "1" ]; then
        echo "failed to quit at.ac.ait.q3p.node-${1}" 
        exit 1
    fi
}


# --------------------------------------------------
# wait for set idle flag in all modules
#
function wait_idle() {

    while :; do

        # wait until there is no working module anymore (no single module having "idle" == false)
        ${TEST_BASE}/bin/qkd-view --short | grep "module:.*false *$" &> /dev/null
        if [ "$?" != "0" ]; then
            break
        fi
        sleep 0
        
    done
}


# --------------------------------------------------
# wait for outgoing keys in a set of modules
#
# ${1}      minimum number of keys out
# ${+}      id of modules
# 
function wait_keys() {

    KEYS=${1}
    shift
    MODULE=${1}
    while [ "${MODULE}" ]; do
    
        echo "waiting for module(s) '${MODULE}' to have at least ${KEYS} keys processed..."

        # iterate over grep'ed qkd-view
        ${QKD_ROOT}/bin/qkd-view --short | grep "^module: *${MODULE}" | while read LINE; do

            echo "${MODULE} detected."

            # collect data
            MODULE_DBUS=$(echo "${LINE}" | awk '{ print $3; }')
            CURRENT_KEYS_OUT=$(echo "${LINE}" | awk '{ print $5; }')

            # amount of keys produced reached?
            if [ "${CURRENT_KEYS_OUT}" -ge "${KEYS}" ]; then
                echo "killing ${MODULE_DBUS} - current keys: ${CURRENT_KEYS_OUT}"
                qkd_qdbus "${MODULE_DBUS}" /Module terminate > /dev/null
            fi

        done 

        # check if a module is still left
        if [ "$(${QKD_ROOT}/bin/qkd-view --short | grep "^module: *${MODULE}" | wc -l)" = "0" ]; then
            shift
            MODULE=${1}
        else
            sleep 1
        fi

    done
}

