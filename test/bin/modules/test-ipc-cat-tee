#!/bin/bash

# ------------------------------------------------------------
# test-ipc-cat-tee
# 
# This is a test file.
#
# TEST: test the a pipeline of 1 cat and NUMBER_TEE tee 
#       interconnected via ipc://
#
# Autor: Oliver Maurhart, <oliver.maurhart@ait.ac.at>
#
# Copyright (C) 2012-2015 AIT Austrian Institute of Technology
# AIT Austrian Institute of Technology GmbH
# Donau-City-Strasse 1 | 1220 Vienna | Austria
# http://www.ait.ac.at
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, 
# Boston, MA  02110-1301, USA.
# ------------------------------------------------------------

echo $$

# base source
export TEST_BASE="@CMAKE_BINARY_DIR@"
source ${TEST_BASE}/test/bin/test-functions


# ------------------------------------------------------------

# init test environment
test_init

# number of qkd-tee modules in the pipe
NUMBER_KEYS=100
NUMBER_TEE=10

# zap previous keys
rm -rf ipc-keys.* &> /dev/null

# create keys
${TEST_BASE}/bin/qkd-key-gen --keys=${NUMBER_KEYS} ipc-keys

# remove the bob key variant (would be confusing)
rm -f ipc-keys.bob &> /dev/null

# start the modules in the background
${TEST_BASE}/bin/qkd-cat --debug --file "ipc-keys.alice" 2>>qkd_cat.debug &
for i in $(seq 1 ${NUMBER_TEE}); do
    ${TEST_BASE}/bin/qkd-tee --debug 2>>qkd_tee_${i}.debug & 
done

# wait until the modules are up
while [ "$(${TEST_BASE}/bin/qkd-view | grep at.ac.ait.qkd.module.cat | wc -l)" != "1" ]; do
    echo "waiting for the pipeline to ignite ..."
    sleep 1
done
while [ "$(${TEST_BASE}/bin/qkd-view | grep at.ac.ait.qkd.module.tee | wc -l)" != "${NUMBER_TEE}" ]; do
    echo "waiting for the pipeline to ignite ..."
    sleep 1
done
echo "modules created"

# walk through the tee modules, adjust and start them
IPC_TO_NEXT_MODULE="ipc://*"
qkd_qdbus | grep at.ac.ait.qkd.module.tee | while read MODULE_TEE; do

    echo "preparing ${MODULE_TEE}"

    # adjust file out
    FILE_URL="file://$(pwd)/ipc-keys.${MODULE_TEE}"
    echo -n "setting file url: ${FILE_URL} ... "
    qkd_qdbus ${MODULE_TEE} /Module Set at.ac.ait.qkd.tee file_url "${FILE_URL}"
    
    # start the module (let itself configure proper pipe in points)
    echo -n "running module with pipe-out: ${IPC_TO_NEXT_MODULE} ... "
    qkd_qdbus ${MODULE_TEE} /Module set_urls "ipc://*" "${IPC_TO_NEXT_MODULE}" "" ""
    qkd_qdbus ${MODULE_TEE} /Module run
    
    # fix the next module endpoint
    IPC_TO_NEXT_MODULE=$(qkd_qdbus ${MODULE_TEE} /Module url_pipe_in)
    
    # ensure the module is running
    while [ "$(qkd_qdbus ${MODULE_TEE} /Module state)" != "2" ]; do
        qkd_qdbus ${MODULE_TEE} /Module resume
        if [ "$?" != "0" ]; then
            echo "failed to resume on module ${MODULE_TEE}"
            exit 1
        fi
    done
    
    # remember value (hack, since while stats a subshell which drops the variable value on exit)
    echo ${IPC_TO_NEXT_MODULE} > ipc_to_next_module
    
done
IPC_TO_NEXT_MODULE=$(cat ipc_to_next_module)
rm -f ipc_to_next_module &> /dev/null

# grab the CAT
MODULE_CAT=$(qkd_qdbus | grep at.ac.ait.qkd.module.cat)
if [ "${MODULE_CAT}" = "" ]; then
    echo "failed to start QKD module: cat"
    exit 1
fi
sleep 1

# start the CAT
echo "starting the starter module: ${MODULE_CAT} ..."
qkd_qdbus ${MODULE_CAT} /Module set_urls "" "${IPC_TO_NEXT_MODULE}" "" ""
qkd_qdbus ${MODULE_CAT} /Module run
qkd_qdbus ${MODULE_CAT} /Module resume

# wait until finish
wait_stalled cat tee
echo "got keys"

# the MD5 of all keys-files MUST be equal
FILE_VARIANTS="$(md5sum ipc-keys.* | cut -d ' ' -f 1 | uniq | wc -l)"
if [ "${FILE_VARIANTS}" != "1" ]; then
    echo "IPC pipe failed: we do have output variants."
    exit 1
fi
echo "pipeline with ICP ok."

# enforce cleansing
test_cleanup

# state that test ok
echo "=== TEST SUCCESS ==="

