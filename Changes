This file holds the changes of the AIT QKD R10 throughout the versions
======================================================================


Changes from 9.9999.4 to 9.9999.5
---------------------------------

* qkd-confirmation passes now disclosed keys as-is

    qkd-confirmation may occur right after error correction.
    As error correction may totally disclose keys it must pass on
    disclosed keys as-is to next module, which should be qkd-resize.
    qkd-resize in turn merges all keys - also disclosed ones - into
    new keys ready for privacy amplification.

* qkd-buffer has been renamed to qkd-resize

    ATTENTION: qkd-buffer is now qkd-resize. This renames also 
    the configuration variables in the config files from 
    "buffer.*" to "resize.*".
    
    qkd-resize buffers incoming keys up to some limit. The old
    limit of "minimum-size" is still an option: buffer all keys
    and when the total amount of key size is greater or equal to
    the number set push a new merged single output key of minimum
    size.
    
    New to qkd-resize is now "exact-size". This works similar
    put pushes keys of exact size. These has some consequences:
    a) if the input key is way larger then the limit, multiple 
       output keys may be generated at once and
    b) there may be some remainder left by splitting up keys
       to achieve keys of exact size. This remainder is prepended
       to the next key.
       
    In any case, qkd-resize enforces a renumbering of keys and
    thus sets the key-id anew.

* qkd-key-gen can now randomize the size of the keys generated

* default timeout on recv calls in modules is set to 1000 millisec

    This changes behavior of modules, since modules without any
    explicit timeout set might be caught in an endless loop
    waiting for some material from its peer, when the latter
    may not exist anymore.

* Crypto Contexts are now concatenable!

    A crypto context, especially the evalution hash algorithm, can
    now be contacatenated. This enables two seperate message streams
    to me melted into a single tag for later authentication.

    This is needed when one concatenates keys to form a larger one.

* revamp of the GF2 polynomial hashing algorithm

    Yes, it is slower, but now it is expendible and more easy to
    read and understand. It is included now in one single file 
    (lib/crypto/evhash.cpp) instead spread across multiple sources.

    Hopefully there's a volunteer to step forward to enhance performance
    on this new implementation.

* dopped UMAC authentication support, fixes #987

* the number of keys "in transit" between two modules is now a maximimum of 10

    This lowers the amount of keys if somewhere at the end of the pipe
    a security breach has been detected. The module itself has no knowledge
    why the next module does not accept keys. This event can be due to 
    several reasons. But one of them is triggered by qkd-auth on failed
    authentications with the impact, that this module (qkd-auth) totally
    stops accepting keys.

    This has a feedback triggered since now the modules back in the pipe
    cannot forward their keys up to a maximum of 10 keys.

    So if the pipeline is winded down by an administrator to inspect the
    problem the overall loss of key material is somehow limited by the
    amount of (modules - 1) times 10 keys (in transit between modules).

* qkd-pipeline autoconnect accepts now void ("", empty, NULL) pipe-outs.

    This is intended for pipelines for which main interest is the performance
    of some modules in between. The resulted key is then discarded if not 
    written to a file via qkd-tee somewhere in the pipe.



Changes from 9.9999.3 to 9.9999.4
---------------------------------

* qkd-pipeline supports now "autoconnect"
    
    When set "autoconnect" to "true", then the qkd-pipeline does now
    interconnect each module listened in the order given on the local
    machine.

    That is: it set url_pipe_in and url_pipe_out automatically without
    any need to set this manually by the administrator which is 
    error prone. 

    Additionally arguments in the XML file are "pipein" which defines the
    input pipe socket for the whole pipeline and "pipeout" likewise
    as the output socket for the whole pipe.

    At the same time the 'start="yes"' argument within the module
    definitions of the pipeline config XML has been dropped.

* added qkd-statistics-average tool

    This causes the new python3 dependency

* added qkd-statistics module

* switched to 0MQ 4.0.5

    ATTENTION: this has a heavy impact on the target platforms.
    For Debian based systems this changes from installing libzmq1
    to installing libzmq3.

* qkd-throttle works now again

* module interrupt and terminate is now gracefully again.

* key synchronization has been improved and stabilised.

* added "--debug-message-flow" to modules

    Most AIT QKD modules will now respond to a "--debug-message-flow" command
    line option. This option will pass on the content of received and sent
    messages to the debug output in canonical form.

    Beware: this will tend to heavy growth of the debug file.

* dropped "error bits" field in key stream

    The error bits field in key stream has been cause to many irritations.
    As it does not provide any benefit the AIT QKD team decided to drop
    this field without substitution.

* added local test DBus when running "make test"

    As such there are not failed DBus/X11 messages when running
    plain via SSH.

* added bob_the_builder script for continuous integration

* Bug fixes

