This file holds the changes of the AIT QKD R10 throughout the versions
======================================================================


Changes from 9.9999.7 to 9.9999.8
---------------------------------

* added qkd-key-slice tool

    The qkd-key-slice tool can extract amount of keys
    from a keystream file.

* introduced key data encoding

    A key has now an associated key data encoding. This encoding
    is an arbitrary human readable text describing the bit pattern
    and layout of the key's data().

* switch from Qt4 to Qt5

    We switched from Qt4 to Qt5, thus temporarily disabling the
    qkd-module-manager fully.

* new key states:

    KEY_STATE_NEW: a brand new key.
    KEY_STATE_TAINTED: a key for which authentication failed.

* qkd-key-dump new option: "--md5sum" and "--md5sum-all"

    The new "--md5sum" option dumps the MD5 hash sum of each
    key material to stdout (a single MD5 for _each_ key).

    The new "--md5sum-all" option generates the MD5 hash sum
    of all key material in the key stream file (a single
    MD5 for _all_ keys).
    
    Hence, only the key material itself is taken into account
    and not the key id, the metadata or anything else.

* qkd-key-dump new option: "--metadata"

    The new "--metadata" option dumps the content of each key
    metadata as XML to stdout.
    
    This can be used to make the history of the key visible.

* qkd-key-compare new option: "--brief"

    The new "--brief" option compares only the content of 
    the key material of two key files, i.e. it does not check
    each key metadata.
    
    If both key data sets are equal qkd-key-compare exits now with 0,
    if key data material differ it exits with 1.

* new key metadata concept

    WARNING: MASSIVE API CHANGE!
    
    We changed the key's metadata concept. Instead having a fixed
    static number of values, we turned into a flexible metadata
    model.
    
    A key's metadata is now stored as a XML document. It has this
    shape (example):
    
            <?xml version="1.0" encoding="utf-8"?>
            <key id="2">
                <general>
                    <state>8</state>
                    <state_name>authenticated</state_name>
                    <crypto>
                        <incoming>null</incoming>
                        <outgoing>null</outgoing>
                    </crypto>
                    <bits>17888</bits>
                    <qber>0.0027708537345321818</qber>
                    <disclosed>2679</disclosed>
                </general>
                <modules>
                    <module id="bb84" type="sifting">
                        <key>
                            <outgoing>
                                <state>2</state>
                                <state_name>sifted</state_name>
                                <bits>17888</bits>
                                <qber>0</qber>
                                <disclosed>0</disclosed>
                            </outgoing>
                        </key>
                    </module>
                    <module id="cascade" type="error correction">
                        <key>
                            <incoming>
                                <state>2</state>
                                <state_name>sifted</state_name>
                                <bits>17888</bits>
                                <qber>0</qber>
                                <disclosed>0</disclosed>
                            </incoming>
                            <outgoing>
                                <state>3</state>
                                <state_name>corrected</state_name>
                                <bits>17888</bits>
                                <qber>0.0021243291592128802</qber>
                                <disclosed>429</disclosed>
                            </outgoing>
                        </key>
                        <passes>14</passes>
                        <shannon-efficiency>1.093947763981544</shannon-efficiency>
                    </module>
                    <module id="confirmation" type="confirmation">
                        <key>
                            <incoming>
                                <state>3</state>
                                <state_name>corrected</state_name>
                                <bits>17888</bits>
                                <qber>0.0021243291592128802</qber>
                                <disclosed>429</disclosed>
                            </incoming>
                            <outgoing>
                                <state>5</state>
                                <state_name>confirmed</state_name>
                                <bits>17888</bits>
                                <qber>0.0021243291592128802</qber>
                                <disclosed>429</disclosed>
                            </outgoing>
                        </key>
                        <rounds>10</rounds>
                    </module>
                    <module id="resize" type="other">
                        <key>
                            <incoming>
                                <state>5</state>
                                <state_name>confirmed</state_name>
                                <bits>17888</bits>
                                <qber>0.0021243291592128802</qber>
                                <disclosed>429</disclosed>
                            </incoming>
                            <outgoing>
                                <state>5</state>
                                <state_name>confirmed</state_name>
                                <bits>89864</bits>
                                <qber>0.0027708537345321818</qber>
                                <disclosed>2679</disclosed>
                            </outgoing>
                        </key>
                        <exact_key_size>0</exact_key_size>
                        <minimum_key_size>10000</minimum_key_size>
                        <key-add id="10" bits="18000"/>
                        <reassign-id new-id="2" old-id="6"/>
                    </module>
                    <module id="privacy-amplification" type="privacy amplification">
                        <key>
                            <incoming>
                                <state>5</state>
                                <state_name>confirmed</state_name>
                                <bits>89864</bits>
                                <qber>0.0027708537345321818</qber>
                                <disclosed>2679</disclosed>
                            </incoming>
                            <outgoing>
                                <state>7</state>
                                <state_name>amplified</state_name>
                                <bits>84608</bits>
                                <qber>0.0027708537345321818</qber>
                                <disclosed>2679</disclosed>
                            </outgoing>
                        </key>
                        <reduction_rate>1</reduction_rate>
                        <security_bits>100</security_bits>
                    </module>
                    <module id="auth" type="other">
                        <key>
                            <incoming>
                                <state>7</state>
                                <state_name>amplified</state_name>
                                <bits>84608</bits>
                                <qber>0.0027708537345321818</qber>
                                <disclosed>2679</disclosed>
                            </incoming>
                            <outgoing>
                                <state>8</state>
                                <state_name>authenticated</state_name>
                                <bits>84608</bits>
                                <qber>0.0027708537345321818</qber>
                                <disclosed>2679</disclosed>
                            </outgoing>
                        </key>
                    </module>
                </modules>
            </key>

    Besides the typical metadata, this structure also contains a key's history.
    The way a key has passed through the modules can be read by expanding the
    'modules' XML-tag and read the 'module' XML-tag entries from top to bottom.
    
    We use boost::property_tree implementation for this. Have a look
    at http://www.boost.org/doc/libs/1_61_0/doc/html/property_tree.html.
    
    We completely dropped the old qkd::key::key::meta structure for this!
    
    Alongside some new methods have been added to qkd::key::key
    
    * metadata() ... this returns the full XML tree now. Starting at the
                     outermost <key> tag.

    * metadata_modules() ... this returns all nodes under the <modules> tag.
    
    * metadata_current_module() ... returns the node in the key's metadata
                                    for the current module.
                                    
    * metadata_xml() ... return key metadata as XML string.
                                    
    Some methods have been added like:
    
    * state() ... current state of the key
    * crypto_context_incoming() ... crypto context scheme string incoming
    * crypto_context_outgoing() ... crypto context scheme string outgoing
    * qber() ... QBER
    * disclosed() ... number of disclosed information bits
    
    These getters do also have their accompanying setter methods with a 
    prefixed "set_".
    
    Also the qkd::module::module class has new methods:
    
    * add_metadata_in() ... add module's metadata to incoming key
    * add_metadata_out() ... add module's metadata to outgoing key
    
    This change is massive but introduces most flexibilty.
    
    Example to set and get arbitary values into/from a key's metadata 
    inside a running QKD module:
    
        // place a text and a value like
        //      <alpha>This is a text</alpha>
        //      <beta>
        //          <gamma>0.05</gamma>
        //      </beta>
        
        boost::property_tree::ptree & x = cKey.metadata_current_module();
        x.put("alpha", "This is a text");
        x.put("beta.gamma", 0.05);
        
        // read these values
        boost::property_tree::ptree & y = cKey.metadata_current_module();
        std::string a = y.get<std::string>("alpha");
        // ... with a default value
        double b = y.get("beta.gamma", 0.01);

    For validation purposes, the new XML metadata format also comes with
    a formal schema definition. The schema (qkd.xsd) can be used to check
    if a given XML document is conforming.


Changes from 9.9999.6 to 9.9999.7
---------------------------------

* new module: qkd-sync

    The new module qkd-sync does simply key synchronization. It
    does not alter the key but may come handy when developing heavy
    parallel QKD pipelines.

* module peer-to-peer send/recv require key id now

    The module's methods recv and send do now require a key-id
    for the messages associated with. In order to ensure a better
    key sync the module must have the chance to detect, if the
    peer module is working on the same or a different key.
    
    As such it is now required to pass on the current key-id to
    the modules recv and send function.
    
    The older method signatures are still present but have been
    labeled deprecated.
    
    This is also true for the module communicator. To stress this
    the qkd::module::module method "comm" has been renamed to
    "communicator".
    

* new exception concept

    We've implemented a new cleaner exception concept.
    
    include/qkd/exception contains now new classes to better
    react on problems within the code.

    There are currently:

    connection_error    errors on module's connection 
                        mismanagement
    db_error            errors within the keystore
                        database
    network_error       errors occuring during network
                        send/recv calls 
    protocol_error      errors on internal protcols used
    randomengine_error  errors when dealing with the
                        random engine sources

    Note, that also C++ standard exceptions like
    std::invalid_argument, std::out_of_range, std::logic_error,
    and std::runtime_error (when aprobiate) are thrown as well.

    However, this will group the most common known exceptions
    which occur inside the libqkd.

    IMPORTANT: this will break implementations expecting certain,
               old exception class names!


* Package creation for more than one distribution.

    We offer now the package creation for more than one Linux
    distribution. Currently we support Debian 8 ("jessie") and
    optionally Ubuntu 15 ("vivid" and "wily"). Still, Debian 8 is
    considered as reference machine, but since many users do
    prefer Ubuntu based systems and Debian packages run into
    dependency problems on recent Ubuntu installments, we give
    this away as a bonus. =)
    
    This should resolve package dependencies, especially for 
    the libboost-1.55.0 vs. libboost-1.58.0 cases.
    
    If you are on a modern Ubuntu distribution you might build
    the Ubuntu package instead of the Debian one to rectify
    missing dependencies dropped by the Ubuntu devs.
    
    In order to create packages in different flavors set the
    PACKAGE_x options right.
    
        PACKAGE_DEBIAN8 .... build Debian 8 packages.
        PACKAGE_UBUNTU15 ... build Ubuntu 15 packages.
    
    Best to do so is to install the cmake-curses-gui and then
    
        $ mkdir build
        $ cd build
        $ cmake ..
        $ ccmake ..
        
        (hence the double 'c' at start in the last command)
        
    Due to limitations of the current cmake (v3.2.2) we can only
    offer to build one distribution flavor at a time. So please select
    only one of the PACKAGE_x options.
    
    In case more than one is defined the behavior is undefined.
    
    Would there be some PACKAGE_FEDORA23 up ahead? Well, maybe.
    Probably... some day.

        
* --debug-key-sync option added to several option.

    This essentially introduces a flag that allows to turn key sync
    debug messages on. They were not optional before but are now
    suppressed by default and can be enabled with this new flag.


* Dropping *_rate DBus properties from module.

    The module does not publish *_rate for keys, keybits, and
    disclosed bits any longer. This values have been
    misleading.


* q3pd config support now automatic ip assignment and routing

    Due to the new "nic" option inside a link configuration of the
    q3pd the link will assign an IPv4 address and a route to its
    peer on the Q3P connection established.
    
    E.g.:
    
        [link.alice_to_bob]
        id = alice_to_bob
        nic = 10.81.39.121 to 10.81.39.122
    
    This will assign the ip 10.81.39.121 to the local (alice) q3p 
    interface and will establish a direct route to 10.81.39.122 (bob) 
    once the connection to the peer has been established.
    
    Any data sent and received on these ip addresses are information
    theoretic secure encrypted and authenticated according to the Q3P 
    protocol.

* new "inject" option in q3pd link configuration

    The "inject" option tells the q3pd to load the file into the 
    working buffers as preshared secret (if present).
    
    E.g.:
    
        [link.alice_to_bob]
        id = alice_to_bob
        inject = file:///run/spool/q3pd/alice_to_bob/preshared.secret
    
    This will load the file /run/spool/q3pd/alice_to_bob/preshared.secret
    at start of the Q3P node.
    
* random URLs now support "c-api:[seed]"

    The random class now support simple POSIX C rand() with 
    optional seed values.
    
* new linear congruential random number generator with "linear-congruential:[seed]"

    This random class uses a simple linear congruential engine to
    generate random numbers. It is designed to be used in testing
    and development scenarios ONLY. Use in a production
    environment is highly discouraged.

* qkd-key-gen's random source can be configured

    To make use of the newly added random number generators,
    qkd-key-gen has been extended to allow the user to manually
    select which random number generating algorithm to make use
    by using the --random-url=... argument. This is particularly
    useful for development and testing purposes where fixed
    seeds can be employed to generate more deterministic
    results.

* drop of boost::shared_ptr and boost::exception

    boost::shared_ptr and boost::exception have been dropped in favor
    for the std:: counterparts. These are easier to understand
    and reduce the dependency to boost (a little).

* qkd-resize does now include all bits of disclosed keys

    In previous versions, qkd-resize did not include the key bits
    of disclosed keys. Such keys might have been disclosed due to
    error correction, whenever the error correction fails. Then
    the QBER of this key should be included in the privacy 
    amplification to follow. To do so, the key is disclosed to
    let the QKD pipeline identify the number of errors in the key.
    Then the key is forwarded (with state DISCLOSED) and disclosed
    bits equals size of key to the next module in the pipe.

    qkd-resize does now aggregate keys to form a new big key for
    privacy amplification. Here the QBER and the disclosed bits of 
    all keys are taken into account to form a new key. This also
    includes the bits of once disclosed keys.

* qkd-view now supports JSON formatting

    The qkd-view tool now supports JSON output when the --json (or -j)
    parameter is specified. This is useful for slightly more stable
    parsing, in particular for test cases.

* new tool: qkd-key-compare

    The new command line tool qkd-key-compare compares two key
    streams and writes the result to stdout.

* addressing a number of spelling errors in the documentation and source code


Changes from 9.9999.5 to 9.9999.6
---------------------------------

* revamp of key synchronization

    New key sync protocol introduces a new step when picking
    a key. This is yet more stable and recovers broken 
    pipelines at either side.


Changes from 9.9999.4 to 9.9999.5
---------------------------------

* writing keys to void pipe_out does now increment key stats

    Writing keys to void (empty) pipe_out connection does now
    increment key_bits_outgoing, keys_outgoing and the
    corresponding rate numbers.
    
    Rationale: void (empty) is always "good"; so a write to
    /dev/null is basically the same and therefore successful
    and as such it has to increase the numbers of successfully
    written data.

* module's "stalled" property renamed to "idle"

* modules can now enumerate the paths on connections

    Each module has listen, peer, pipe_in and pipe_out connections.
    On each connections a (theretical) arbitrary number of paths to
    remotes are allowed. On configuration these paths are seperated
    with semicolon ';' in the set_url_* functions.
    
    qkd::module::module does now support enumeration of configured
    paths at runtime. Utilizing the qkd::module::module::process()
    function for the workload (qkd::module::workload) the path 
    index to be used for forwarding the key to the next module can
    now be specified. A path index of -1 indicates that the libqkd
    framework should choose a suitable path on its own.

* Dropped support of various timeout on read/recv/send/write

    Due to causing various timing conflicts general timeout support
    on the API has been dropped. The current timeout values are:
    
        - read - read a key from previous module: 1000ms
        - recv - receive message from peer: infinite
        - send - send message to peer: infinite
        - write - write key to next module: infinite
        
    In case an I/O operation takes too long the module's worker
    thread doing all this I/O can be interrupted with the
    
        qkd::module::module::interrupt_worker() 
        
    method.

    Arbitrary timeouts could be added on demand in future again.

* module connections I/O overhaul

    The module's connection pipe_in, pipe_out, peer (alice) and 
    listen (bob) have been undergone a major overhaul. Now the module
    has four connections objects each with a number of "paths" to 
    remotes. 
    
    In theory the number of paths for each connection is unlimited.
    Though this has to be more investigated.
    
    To add more than one path to a connection seperate each url
    to the connection with ";".
    
    E.g. set pipe_out to multiple remotes:
        url_pipe_out = "ipc://run/qkd/next_module.1;ipc://run/qkd/next_module.2"
        
        would pass the processed keys to 
        - ipc://run/qkd/next_module.1
        and
        - ipc://run/qkd/next_module.2
        
        However, currently we support only ROUND_ROBIN. Meaning
        a key goes to ipc://run/qkd/next_module.1 and the next
        to ipc://run/qkd/next_module.2.

* clang-3.6 support

    If you want to compile with clang (http://clang.llvm.org) than we 
    do now support this compiler suite. After install 
    (e.g. $ sudo apt-get install clang) you may switch freely between
    gcc and clang.
    
    To enable clang you can set
    
         $ export CC=/usr/bin/clang
         $ export CXX=/usr/bin/clang++
         
    prior before running "cmake .." in the build folder.

* qkd-confirmation passes now disclosed keys as-is

    qkd-confirmation may occur right after error correction.
    As error correction may totally disclose keys it must pass on
    disclosed keys as-is to next module, which should be qkd-resize.
    qkd-resize in turn merges all non-disclosed keys into new keys 
    ready for privacy amplification. However, the disclosed keys are
    not added but the number of disclosed bits is. This has an impact 
    on privacy amplification. 
    
    Without this privacy amplification works on false numbers since
    the amount of disclosed bits is far greater if the disclosed
    keys are not taken into account.

* qkd-buffer has been renamed to qkd-resize

    ATTENTION: qkd-buffer is now qkd-resize. This renames also 
    the configuration variables in the config files from 
    "buffer.*" to "resize.*".
    
    qkd-resize buffers incoming keys up to some limit. The old
    limit of "minimum-size" is still an option: buffer all keys
    and when the total amount of key size is greater or equal to
    the number set push a new merged single output key of minimum
    size.
    
    New to qkd-resize is now "exact-size". This works similar
    put pushes keys of exact size. These has some consequences:
    a) if the input key is way larger then the limit, multiple 
       output keys may be generated at once and
    b) there may be some remainder left by splitting up keys
       to achieve keys of exact size. This remainder is prepended
       to the next key.
       
    In any case, qkd-resize enforces a renumbering of keys and
    thus sets the key-id anew.

* qkd-key-gen can now randomize the size of the keys generated

* default timeout on recv calls in modules is set to 1000 millisec

    This changes behavior of modules, since modules without any
    explicit timeout set might be caught in an endless loop
    waiting for some material from its peer, when the latter
    may not exist anymore.

* Crypto Contexts are now concatenable!

    A crypto context, especially the evalution hash algorithm, can
    now be concatenated. This enables two seperate message streams
    to me melted into a single tag for later authentication.

    This is needed when one concatenates keys to form a larger one.

* revamp of the GF2 polynomial hashing algorithm

    Yes, it is slower, but now it is expendible and more easy to
    read and understand. It is included now in one single file 
    (lib/crypto/evhash.cpp) instead spread across multiple sources.

    Hopefully there's a volunteer to step forward to enhance performance
    on this new implementation.

* dropped UMAC authentication support, fixes #987

* the number of keys "in transit" between two modules is now a maximimum of 10

    This lowers the amount of keys if somewhere at the end of the pipe
    a security breach has been detected. The module itself has no knowledge
    why the next module does not accept keys. This event can be due to 
    several reasons. But one of them is triggered by qkd-auth on failed
    authentications with the impact, that this module (qkd-auth) totally
    stops accepting keys.

    This has a feedback triggered since now the modules back in the pipe
    cannot forward their keys up to a maximum of 10 keys.

    So if the pipeline is winded down by an administrator to inspect the
    problem the overall loss of key material is somehow limited by the
    amount of (modules - 1) times 10 keys (in transit between modules).

* qkd-pipeline autoconnect accepts now void ("", empty, NULL) pipe-outs.

    This is intended for pipelines for which main interest is the performance
    of some modules in between. The resulted key is then discarded if not 
    written to a file via qkd-tee somewhere in the pipe.



Changes from 9.9999.3 to 9.9999.4
---------------------------------

* qkd-pipeline supports now "autoconnect"
    
    When set "autoconnect" to "true", then the qkd-pipeline does now
    interconnect each module listened in the order given on the local
    machine.

    That is: it set url_pipe_in and url_pipe_out automatically without
    any need to set this manually by the administrator which is 
    error prone. 

    Additionally arguments in the XML file are "pipein" which defines the
    input pipe socket for the whole pipeline and "pipeout" likewise
    as the output socket for the whole pipe.

    At the same time the 'start="yes"' argument within the module
    definitions of the pipeline config XML has been dropped.

* added qkd-statistics-average tool

    This causes the new python3 dependency

* added qkd-statistics module

* switched to 0MQ 4.0.5

    ATTENTION: this has a heavy impact on the target platforms.
    For Debian based systems this changes from installing libzmq1
    to installing libzmq3.

* qkd-throttle works now again

* module interrupt and terminate is now gracefully again.

* key synchronization has been improved and stabilised.

* added "--debug-message-flow" to modules

    Most AIT QKD modules will now respond to a "--debug-message-flow" command
    line option. This option will pass on the content of received and sent
    messages to the debug output in canonical form.

    Beware: this will tend to heavy growth of the debug file.

* dropped "error bits" field in key stream

    The error bits field in key stream has been cause to many irritations.
    As it does not provide any benefit the AIT QKD team decided to drop
    this field without substitution.

* added local test DBus when running "make test"

    As such there are not failed DBus/X11 messages when running
    plain via SSH.

* added bob_the_builder script for continuous integration

* Bug fixes

